<!DOCTYPE html>
<html>
<head>
  <script src="face-api.js"></script>
  <script src="js/faceDetectionControls.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/css/materialize.css">
  <script type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js"></script>
  <title>시간 측정</title>

  <style>
    .page-container {
      left: 0;
      right: 0;
      margin: auto;
      margin-top: 80px;
      padding-left: 100px;
      display: inline-flex !important;
    }
    
    .center-content {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      flex-wrap: wrap;
    }
    
    .side-by-side {
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .side-by-side >* {
      margin: 0 5px;
    }
    
    .bold {
      font-weight: bold;
    }
    
    .margin-sm {
      margin: 5px;
    }
    
    .margin {
      margin: 20px;
    }
    
    .button-sm {
      padding: 0 10px !important;
    }
    
    .pad-sides-sm {
      padding: 0 8px !important;
    }
    
    #overlay, .overlay {
      position: absolute;
      top: 0;
      left: 0;
    }
    
    #facesContainer canvas {
      margin: 10px;
    }
    
    input[type="file"]::-webkit-file-upload-button {
        background: #26a69a;
        border: 1px solid gray;
        cursor: pointer;
        color: #fff;
        border-radius: .2em;
    }

    .timer-box{
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 10px;
      padding-left: 150px;
    }
    .timer{
      font-size: 60px;
      margin-bottom: 30px;
      transition: all 1s;
    }
    .timer-form__Btn{
      display: flex;
      flex-direction: row;
      justify-content: center;
      text-align: center;
      padding-bottom: 25px;
    }
    .timerBtn{
      height: 30px;
      width: 100px;
      border-radius: 25px;
      margin-left: 10px;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .timerBtn i {
      transition: all 0.2s ease-in-out;
      cursor: pointer;
    }
    .timerBtn i:active,
    .timerBtn i:hovor{
      font-size: 30px;
    }
    .timerBtn input{
      transition: all 0.2s ease-in-out;
      cursor: pointer;
    }
    .timerBtn input:active,
    .timerBtn input:hovor{
      font-size: 30px;
    }
    .start + div > .timerBtn:nth-child(1){
      display: none;
    }
  </style>
</head>

<body>
  <div class="page-container">
    <!-- 웹캠 보여주는 부분 -->
    <div class="progress" id="loader">
      <div class="indeterminate"></div>
    </div>
    <div style="position: relative" class="margin">
      <video onloadedmetadata="onPlay(this)" id="inputVideo" autoplay muted playsinline></video>
      <canvas id="overlay" />
  </div>

  <div class="center-content">
    <div id="warning" style="padding-bottom:50px; padding-left: 150px;"></div>
    <div class="timer-box">
      <div class="timer js-timer">00:00:00</div>
      <div class="timer-form__Btn">
        <div class="timerBtn js-timer__startBtn">
          <i><img style="width: 30px;" src="image/start.png"/></i>
        </div>
        <!-- 타이머 멈추는 버튼 -->
        <div class="timerBtn js-timer__endBtn">
          <button style="border: 0; outline: 0; background-color:transparent;" type="submit" value="timer" ><img style="width: 30px;" src="image/stop.png"/></button>
        </div>
      </div>
      <div><b>프레임 안으로 들어오게 자세를 고쳐잡고 타이머를 실행시켜주세요.</b></div>
    </div>
  </div>

  <!-- footer -->
  <footer style="color: white; background-color: #095D3D; padding: 15px; position : absolute; bottom : 0; right: 0px; width: 100%;">
    <div>
      <small>협성대학교 16조 졸업작품.</small>
      <a style="float: right;"  href="https://github.com/you-eun-hye/GraduationProject">
        <img style="width: 30px;" src="image/github.png"/>
      </a>
    </div>
  </footer>
      
  </body>

  <script>
    const timer = document.querySelector('.js-timer'),
    startBtn = document.querySelector('.js-timer__startBtn'),
    endBtn = document.querySelector('.js-timer__endBtn'),
    element = document.getElementById('warning');
    let TIME = 0;
    let cron;


    // 타이머 함수
    function updateTimer(){
      const hours = Math.floor(TIME/3600);
      const checkMinutes = Math.floor(TIME/60);
      const seconds = TIME%60;
      const minutes = checkMinutes%60;

      timer.innerText = `${hours < 10 ? `0${hours}`:hours}:${
        minutes < 10 ? `0${minutes}`:minutes}:${
        seconds < 10 ? `0${seconds}`:seconds}`;
      TIME++;
    }

    // 타이머 실행 버튼, timer페이지에서 start버튼 클릭 시 시간 측정하는 함수
    function startButton(){
        updateTimer();
        clearInterval(cron);
        cron = setInterval(updateTimer, 1000); // 매 초당 updateTimer 반복
    }

    // 시간 정지 함수, 프레임을 벗어났거나 얼굴이 인식안될 때 사용
    function stopButton(){
      clearInterval(cron);
    }

    // 타이머 멈추는 버튼에 적용되는 함수
    function endButton(){
      clearInterval(cron);
      window.location.href = "todo?seconds="+TIME;
    }

    startBtn.addEventListener('click', startButton);
    endBtn.addEventListener('click', endButton);


    let forwardTimes = []

    // 감지되기까지 시간과 정확도 관련 함수
    function updateTimeStats(timeInMs) {
      forwardTimes = [timeInMs].concat(forwardTimes).slice(0, 30) // 문자 slice(잘라서) 합쳐(concat)
      const avgTimeInMs = forwardTimes.reduce((total, t) => total + t) / forwardTimes.length
      $('#time').val(`${Math.round(avgTimeInMs)} ms`) // 반올림해서 표현
      $('#fps').val(`${faceapi.utils.round(1000 / avgTimeInMs)}`)
    }


    // 비디오, 사각형, 시간 등 
    async function onPlay() {
      const videoEl = $('#inputVideo').get(0)

      if(videoEl.paused || videoEl.ended || !isFaceDetectionModelLoaded())
        return setTimeout(() => onPlay()) // 얼굴 나타날 때까지 기다렸다가 다시 실행

      const options = getFaceDetectorOptions() // 대충 얼굴가져오는 거
      const ts = Date.now() // 현재까지 경과된 초를 변수에 담음
      const result = await faceapi.detectSingleFace(videoEl, options) // 얼굴가져오는 거 2
      updateTimeStats(Date.now() - ts) // 걸린 시간 최종

      // 여기가 얼굴 사각형 관련 코드임
      if (result) {
        const canvas = $('#overlay').get(0) // 대충 얼굴 비디오 보여주는 거
        const dims = faceapi.matchDimensions(canvas, videoEl, true) // 얼굴 사이즈 맞춰 사각형 생성
        faceapi.draw.drawBox(canvas, faceapi.resizeResults(result, dims))
      }
      if(!result || element.innerHTML != ""){
        stopButton();
      }
      setTimeout(() => onPlay()) // 마찬가지로 기다렸다가 다시 실행
    }

    // 사용 기능 바꼈을 때(Tiny_face_detector), 영상 이미지로 쪼개서 가져오는 코드
    async function run() {
      // load face detection model
      await changeFaceDetector(TINY_FACE_DETECTOR)
      changeInputSize(128)

      // try to access users webcam and stream the images
      // to the video element
      const stream = await navigator.mediaDevices.getUserMedia({ video: {} })
      const videoEl = $('#inputVideo').get(0)
      videoEl.srcObject = stream
    }

    function updateResults() {} // 넌 뭐야?

    // 사각형 보여주고 초기화시키고 다시 사각형 보여주고 하는 함수
    $(document).ready(function() {
      initFaceDetectionControls()
      run()
    })
  </script>
</body>
</html>
